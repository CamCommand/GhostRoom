double dotProduct = 0.0;
        double normA = 0.0;
        double normB = 0.0;
        for (String c : cats.keys()) {
            //System.out.println(cats.keys());
            for (String d : cats.get(c).keys()) {
                if (dogs.get(d) != null) {
                    dotProduct = cats.get(c).get(d).count * dogs.get(d).count;
                    normA += Math.pow(cats.get(c).get(d).count, 2);
                    normB += Math.pow(dogs.get(d).count, 2);
                }
            }
            //System.out.println("\n" + dotProduct / (Math.sqrt(normA) * Math.sqrt(normB)));
		double num =  dotProduct / Math.sqrt(normA * normB);
            if(num < 1){
                System.out.println(num + " " + c);
            }
        }

        return dotProduct / (Math.sqrt(normA) * Math.sqrt(normB));

		
		
		  double dotProduct = 0.0;
        double magnitude1 = 0.0;
        double magnitude2 = 0.0;
        double cosineSimilarity = 0.0;

        for (int i = 0; i < docVector1.length; i++) //docVector1 and docVector2 must be of same length
        {
            dotProduct += docVector1[i] * docVector2[i];  //a.b
            magnitude1 += Math.pow(docVector1[i], 2);  //(a^2)
            magnitude2 += Math.pow(docVector2[i], 2); //(b^2)
        }

        magnitude1 = Math.sqrt(magnitude1);//sqrt(a^2)
        magnitude2 = Math.sqrt(magnitude2);//sqrt(b^2)

        if (magnitude1 != 0.0 | magnitude2 != 0.0)
        {
            cosineSimilarity = dotProduct / (magnitude1 * magnitude2);
        }
        else
        {
            return 0.0;
        }
        return cosineSimilarity;
    }
		
		
		
		
		
		
		        HashSet<String> intersection = new HashSet<>(cats.keys());
        intersection.retainAll(dogs.keys());

        double dotProduct = 0, magnitudeA = 0, magnitudeB = 0;

        //Calculate dot product
        for (String item : intersection) {
            dotProduct += cats.get(item).get(item).count * dogs.get(item).count;
        }

        //Calculate magnitude a
        for (String k : cats.keys()) {
            magnitudeA += Math.pow(cats.get(k), 2);
        }

        //Calculate magnitude b
        for (String k : dogs.keys()) {
            magnitudeB += Math.pow(dogs.get(k), 2);
        }

        //return cosine similarity
        return dotProduct / Math.sqrt(magnitudeA * magnitudeB);